{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mirkocaroleo/house-prices-advanced-regression-techniques-2nd?scriptVersionId=215955843\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"8969be1c","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-01-03T15:06:11.569184Z","iopub.status.busy":"2025-01-03T15:06:11.568827Z","iopub.status.idle":"2025-01-03T15:06:11.96835Z","shell.execute_reply":"2025-01-03T15:06:11.966828Z"},"papermill":{"duration":0.410462,"end_time":"2025-01-03T15:06:11.97068","exception":false,"start_time":"2025-01-03T15:06:11.560218","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n","/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n","/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n","/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n"]}],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"code","execution_count":2,"id":"5a65e544","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:11.988733Z","iopub.status.busy":"2025-01-03T15:06:11.988284Z","iopub.status.idle":"2025-01-03T15:06:11.993409Z","shell.execute_reply":"2025-01-03T15:06:11.992243Z"},"papermill":{"duration":0.014859,"end_time":"2025-01-03T15:06:11.995089","exception":false,"start_time":"2025-01-03T15:06:11.98023","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["['house-prices-advanced-regression-techniques']\n"]}],"source":["import os\n","print(os.listdir('/kaggle/input'))"]},{"cell_type":"code","execution_count":3,"id":"8ed247d8","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.016056Z","iopub.status.busy":"2025-01-03T15:06:12.015686Z","iopub.status.idle":"2025-01-03T15:06:12.1174Z","shell.execute_reply":"2025-01-03T15:06:12.116269Z"},"papermill":{"duration":0.116984,"end_time":"2025-01-03T15:06:12.119144","exception":false,"start_time":"2025-01-03T15:06:12.00216","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>MSSubClass</th>\n","      <th>MSZoning</th>\n","      <th>LotFrontage</th>\n","      <th>LotArea</th>\n","      <th>Street</th>\n","      <th>Alley</th>\n","      <th>LotShape</th>\n","      <th>LandContour</th>\n","      <th>Utilities</th>\n","      <th>...</th>\n","      <th>PoolArea</th>\n","      <th>PoolQC</th>\n","      <th>Fence</th>\n","      <th>MiscFeature</th>\n","      <th>MiscVal</th>\n","      <th>MoSold</th>\n","      <th>YrSold</th>\n","      <th>SaleType</th>\n","      <th>SaleCondition</th>\n","      <th>SalePrice</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>65.0</td>\n","      <td>8450</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>208500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>20</td>\n","      <td>RL</td>\n","      <td>80.0</td>\n","      <td>9600</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2007</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>181500</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>68.0</td>\n","      <td>11250</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>223500</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>70</td>\n","      <td>RL</td>\n","      <td>60.0</td>\n","      <td>9550</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2006</td>\n","      <td>WD</td>\n","      <td>Abnorml</td>\n","      <td>140000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>84.0</td>\n","      <td>14260</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>12</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>250000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 81 columns</p>\n","</div>"],"text/plain":["   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n","0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n","1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n","2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n","3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n","4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n","\n","  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n","0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n","1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n","2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n","3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n","4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n","\n","  YrSold  SaleType  SaleCondition  SalePrice  \n","0   2008        WD         Normal     208500  \n","1   2007        WD         Normal     181500  \n","2   2008        WD         Normal     223500  \n","3   2006        WD        Abnorml     140000  \n","4   2008        WD         Normal     250000  \n","\n","[5 rows x 81 columns]"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["import pandas as InterruptedError\n","\n","train_df = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv')\n","test_df = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/test.csv')\n","\n","train_df.head()"]},{"cell_type":"code","execution_count":4,"id":"a83be182","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.134724Z","iopub.status.busy":"2025-01-03T15:06:12.134379Z","iopub.status.idle":"2025-01-03T15:06:12.153704Z","shell.execute_reply":"2025-01-03T15:06:12.15267Z"},"papermill":{"duration":0.028884,"end_time":"2025-01-03T15:06:12.155249","exception":false,"start_time":"2025-01-03T15:06:12.126365","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>MSSubClass</th>\n","      <th>MSZoning</th>\n","      <th>LotFrontage</th>\n","      <th>LotArea</th>\n","      <th>Street</th>\n","      <th>Alley</th>\n","      <th>LotShape</th>\n","      <th>LandContour</th>\n","      <th>Utilities</th>\n","      <th>...</th>\n","      <th>ScreenPorch</th>\n","      <th>PoolArea</th>\n","      <th>PoolQC</th>\n","      <th>Fence</th>\n","      <th>MiscFeature</th>\n","      <th>MiscVal</th>\n","      <th>MoSold</th>\n","      <th>YrSold</th>\n","      <th>SaleType</th>\n","      <th>SaleCondition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1461</td>\n","      <td>20</td>\n","      <td>RH</td>\n","      <td>80.0</td>\n","      <td>11622</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>120</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>MnPrv</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1462</td>\n","      <td>20</td>\n","      <td>RL</td>\n","      <td>81.0</td>\n","      <td>14267</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Gar2</td>\n","      <td>12500</td>\n","      <td>6</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1463</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>74.0</td>\n","      <td>13830</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>MnPrv</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1464</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>78.0</td>\n","      <td>9978</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1465</td>\n","      <td>120</td>\n","      <td>RL</td>\n","      <td>43.0</td>\n","      <td>5005</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>HLS</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>144</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 80 columns</p>\n","</div>"],"text/plain":["     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n","0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n","1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n","2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n","3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n","4  1465         120       RL         43.0     5005   Pave   NaN      IR1   \n","\n","  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n","0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n","1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n","2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n","3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n","4         HLS    AllPub  ...         144        0    NaN    NaN         NaN   \n","\n","  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n","0       0      6    2010        WD         Normal  \n","1   12500      6    2010        WD         Normal  \n","2       0      3    2010        WD         Normal  \n","3       0      6    2010        WD         Normal  \n","4       0      1    2010        WD         Normal  \n","\n","[5 rows x 80 columns]"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["test_df.head()"]},{"cell_type":"markdown","id":"81d32e3b","metadata":{"papermill":{"duration":0.007357,"end_time":"2025-01-03T15:06:12.170467","exception":false,"start_time":"2025-01-03T15:06:12.16311","status":"completed"},"tags":[]},"source":["Now that we have downloaded our train and test df we can proceed with the Exploratory Data Analysis to clean the dataframes, dealing with NaN data and encoding the categorical data accordingly."]},{"cell_type":"code","execution_count":5,"id":"d38d29d5","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.186576Z","iopub.status.busy":"2025-01-03T15:06:12.186194Z","iopub.status.idle":"2025-01-03T15:06:12.191914Z","shell.execute_reply":"2025-01-03T15:06:12.190657Z"},"papermill":{"duration":0.015588,"end_time":"2025-01-03T15:06:12.193606","exception":false,"start_time":"2025-01-03T15:06:12.178018","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["(1460, 81)\n","(1459, 80)\n"]}],"source":["print(train_df.shape)\n","\n","print(test_df.shape)"]},{"cell_type":"code","execution_count":6,"id":"4b930413","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.209888Z","iopub.status.busy":"2025-01-03T15:06:12.209515Z","iopub.status.idle":"2025-01-03T15:06:12.249372Z","shell.execute_reply":"2025-01-03T15:06:12.248192Z"},"papermill":{"duration":0.05094,"end_time":"2025-01-03T15:06:12.252016","exception":false,"start_time":"2025-01-03T15:06:12.201076","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1460 entries, 0 to 1459\n","Data columns (total 81 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   Id             1460 non-null   int64  \n"," 1   MSSubClass     1460 non-null   int64  \n"," 2   MSZoning       1460 non-null   object \n"," 3   LotFrontage    1201 non-null   float64\n"," 4   LotArea        1460 non-null   int64  \n"," 5   Street         1460 non-null   object \n"," 6   Alley          91 non-null     object \n"," 7   LotShape       1460 non-null   object \n"," 8   LandContour    1460 non-null   object \n"," 9   Utilities      1460 non-null   object \n"," 10  LotConfig      1460 non-null   object \n"," 11  LandSlope      1460 non-null   object \n"," 12  Neighborhood   1460 non-null   object \n"," 13  Condition1     1460 non-null   object \n"," 14  Condition2     1460 non-null   object \n"," 15  BldgType       1460 non-null   object \n"," 16  HouseStyle     1460 non-null   object \n"," 17  OverallQual    1460 non-null   int64  \n"," 18  OverallCond    1460 non-null   int64  \n"," 19  YearBuilt      1460 non-null   int64  \n"," 20  YearRemodAdd   1460 non-null   int64  \n"," 21  RoofStyle      1460 non-null   object \n"," 22  RoofMatl       1460 non-null   object \n"," 23  Exterior1st    1460 non-null   object \n"," 24  Exterior2nd    1460 non-null   object \n"," 25  MasVnrType     588 non-null    object \n"," 26  MasVnrArea     1452 non-null   float64\n"," 27  ExterQual      1460 non-null   object \n"," 28  ExterCond      1460 non-null   object \n"," 29  Foundation     1460 non-null   object \n"," 30  BsmtQual       1423 non-null   object \n"," 31  BsmtCond       1423 non-null   object \n"," 32  BsmtExposure   1422 non-null   object \n"," 33  BsmtFinType1   1423 non-null   object \n"," 34  BsmtFinSF1     1460 non-null   int64  \n"," 35  BsmtFinType2   1422 non-null   object \n"," 36  BsmtFinSF2     1460 non-null   int64  \n"," 37  BsmtUnfSF      1460 non-null   int64  \n"," 38  TotalBsmtSF    1460 non-null   int64  \n"," 39  Heating        1460 non-null   object \n"," 40  HeatingQC      1460 non-null   object \n"," 41  CentralAir     1460 non-null   object \n"," 42  Electrical     1459 non-null   object \n"," 43  1stFlrSF       1460 non-null   int64  \n"," 44  2ndFlrSF       1460 non-null   int64  \n"," 45  LowQualFinSF   1460 non-null   int64  \n"," 46  GrLivArea      1460 non-null   int64  \n"," 47  BsmtFullBath   1460 non-null   int64  \n"," 48  BsmtHalfBath   1460 non-null   int64  \n"," 49  FullBath       1460 non-null   int64  \n"," 50  HalfBath       1460 non-null   int64  \n"," 51  BedroomAbvGr   1460 non-null   int64  \n"," 52  KitchenAbvGr   1460 non-null   int64  \n"," 53  KitchenQual    1460 non-null   object \n"," 54  TotRmsAbvGrd   1460 non-null   int64  \n"," 55  Functional     1460 non-null   object \n"," 56  Fireplaces     1460 non-null   int64  \n"," 57  FireplaceQu    770 non-null    object \n"," 58  GarageType     1379 non-null   object \n"," 59  GarageYrBlt    1379 non-null   float64\n"," 60  GarageFinish   1379 non-null   object \n"," 61  GarageCars     1460 non-null   int64  \n"," 62  GarageArea     1460 non-null   int64  \n"," 63  GarageQual     1379 non-null   object \n"," 64  GarageCond     1379 non-null   object \n"," 65  PavedDrive     1460 non-null   object \n"," 66  WoodDeckSF     1460 non-null   int64  \n"," 67  OpenPorchSF    1460 non-null   int64  \n"," 68  EnclosedPorch  1460 non-null   int64  \n"," 69  3SsnPorch      1460 non-null   int64  \n"," 70  ScreenPorch    1460 non-null   int64  \n"," 71  PoolArea       1460 non-null   int64  \n"," 72  PoolQC         7 non-null      object \n"," 73  Fence          281 non-null    object \n"," 74  MiscFeature    54 non-null     object \n"," 75  MiscVal        1460 non-null   int64  \n"," 76  MoSold         1460 non-null   int64  \n"," 77  YrSold         1460 non-null   int64  \n"," 78  SaleType       1460 non-null   object \n"," 79  SaleCondition  1460 non-null   object \n"," 80  SalePrice      1460 non-null   int64  \n","dtypes: float64(3), int64(35), object(43)\n","memory usage: 924.0+ KB\n","None\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1459 entries, 0 to 1458\n","Data columns (total 80 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   Id             1459 non-null   int64  \n"," 1   MSSubClass     1459 non-null   int64  \n"," 2   MSZoning       1455 non-null   object \n"," 3   LotFrontage    1232 non-null   float64\n"," 4   LotArea        1459 non-null   int64  \n"," 5   Street         1459 non-null   object \n"," 6   Alley          107 non-null    object \n"," 7   LotShape       1459 non-null   object \n"," 8   LandContour    1459 non-null   object \n"," 9   Utilities      1457 non-null   object \n"," 10  LotConfig      1459 non-null   object \n"," 11  LandSlope      1459 non-null   object \n"," 12  Neighborhood   1459 non-null   object \n"," 13  Condition1     1459 non-null   object \n"," 14  Condition2     1459 non-null   object \n"," 15  BldgType       1459 non-null   object \n"," 16  HouseStyle     1459 non-null   object \n"," 17  OverallQual    1459 non-null   int64  \n"," 18  OverallCond    1459 non-null   int64  \n"," 19  YearBuilt      1459 non-null   int64  \n"," 20  YearRemodAdd   1459 non-null   int64  \n"," 21  RoofStyle      1459 non-null   object \n"," 22  RoofMatl       1459 non-null   object \n"," 23  Exterior1st    1458 non-null   object \n"," 24  Exterior2nd    1458 non-null   object \n"," 25  MasVnrType     565 non-null    object \n"," 26  MasVnrArea     1444 non-null   float64\n"," 27  ExterQual      1459 non-null   object \n"," 28  ExterCond      1459 non-null   object \n"," 29  Foundation     1459 non-null   object \n"," 30  BsmtQual       1415 non-null   object \n"," 31  BsmtCond       1414 non-null   object \n"," 32  BsmtExposure   1415 non-null   object \n"," 33  BsmtFinType1   1417 non-null   object \n"," 34  BsmtFinSF1     1458 non-null   float64\n"," 35  BsmtFinType2   1417 non-null   object \n"," 36  BsmtFinSF2     1458 non-null   float64\n"," 37  BsmtUnfSF      1458 non-null   float64\n"," 38  TotalBsmtSF    1458 non-null   float64\n"," 39  Heating        1459 non-null   object \n"," 40  HeatingQC      1459 non-null   object \n"," 41  CentralAir     1459 non-null   object \n"," 42  Electrical     1459 non-null   object \n"," 43  1stFlrSF       1459 non-null   int64  \n"," 44  2ndFlrSF       1459 non-null   int64  \n"," 45  LowQualFinSF   1459 non-null   int64  \n"," 46  GrLivArea      1459 non-null   int64  \n"," 47  BsmtFullBath   1457 non-null   float64\n"," 48  BsmtHalfBath   1457 non-null   float64\n"," 49  FullBath       1459 non-null   int64  \n"," 50  HalfBath       1459 non-null   int64  \n"," 51  BedroomAbvGr   1459 non-null   int64  \n"," 52  KitchenAbvGr   1459 non-null   int64  \n"," 53  KitchenQual    1458 non-null   object \n"," 54  TotRmsAbvGrd   1459 non-null   int64  \n"," 55  Functional     1457 non-null   object \n"," 56  Fireplaces     1459 non-null   int64  \n"," 57  FireplaceQu    729 non-null    object \n"," 58  GarageType     1383 non-null   object \n"," 59  GarageYrBlt    1381 non-null   float64\n"," 60  GarageFinish   1381 non-null   object \n"," 61  GarageCars     1458 non-null   float64\n"," 62  GarageArea     1458 non-null   float64\n"," 63  GarageQual     1381 non-null   object \n"," 64  GarageCond     1381 non-null   object \n"," 65  PavedDrive     1459 non-null   object \n"," 66  WoodDeckSF     1459 non-null   int64  \n"," 67  OpenPorchSF    1459 non-null   int64  \n"," 68  EnclosedPorch  1459 non-null   int64  \n"," 69  3SsnPorch      1459 non-null   int64  \n"," 70  ScreenPorch    1459 non-null   int64  \n"," 71  PoolArea       1459 non-null   int64  \n"," 72  PoolQC         3 non-null      object \n"," 73  Fence          290 non-null    object \n"," 74  MiscFeature    51 non-null     object \n"," 75  MiscVal        1459 non-null   int64  \n"," 76  MoSold         1459 non-null   int64  \n"," 77  YrSold         1459 non-null   int64  \n"," 78  SaleType       1458 non-null   object \n"," 79  SaleCondition  1459 non-null   object \n","dtypes: float64(11), int64(26), object(43)\n","memory usage: 912.0+ KB\n","None\n"]}],"source":["print(train_df.info())\n","\n","print(test_df.info())"]},{"cell_type":"code","execution_count":7,"id":"06fd2924","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.268708Z","iopub.status.busy":"2025-01-03T15:06:12.268331Z","iopub.status.idle":"2025-01-03T15:06:12.299544Z","shell.execute_reply":"2025-01-03T15:06:12.298327Z"},"papermill":{"duration":0.041494,"end_time":"2025-01-03T15:06:12.30132","exception":false,"start_time":"2025-01-03T15:06:12.259826","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Missing Values in train_df with Dtypes:\n","          Column  Missing Count    Dtype\n","0    LotFrontage            259  float64\n","1          Alley           1369   object\n","2     MasVnrType            872   object\n","3     MasVnrArea              8  float64\n","4       BsmtQual             37   object\n","5       BsmtCond             37   object\n","6   BsmtExposure             38   object\n","7   BsmtFinType1             37   object\n","8   BsmtFinType2             38   object\n","9     Electrical              1   object\n","10   FireplaceQu            690   object\n","11    GarageType             81   object\n","12   GarageYrBlt             81  float64\n","13  GarageFinish             81   object\n","14    GarageQual             81   object\n","15    GarageCond             81   object\n","16        PoolQC           1453   object\n","17         Fence           1179   object\n","18   MiscFeature           1406   object\n","\n","Missing Values in test_df with Dtypes:\n","          Column  Missing Count    Dtype\n","0       MSZoning              4   object\n","1    LotFrontage            227  float64\n","2          Alley           1352   object\n","3      Utilities              2   object\n","4    Exterior1st              1   object\n","5    Exterior2nd              1   object\n","6     MasVnrType            894   object\n","7     MasVnrArea             15  float64\n","8       BsmtQual             44   object\n","9       BsmtCond             45   object\n","10  BsmtExposure             44   object\n","11  BsmtFinType1             42   object\n","12    BsmtFinSF1              1  float64\n","13  BsmtFinType2             42   object\n","14    BsmtFinSF2              1  float64\n","15     BsmtUnfSF              1  float64\n","16   TotalBsmtSF              1  float64\n","17  BsmtFullBath              2  float64\n","18  BsmtHalfBath              2  float64\n","19   KitchenQual              1   object\n","20    Functional              2   object\n","21   FireplaceQu            730   object\n","22    GarageType             76   object\n","23   GarageYrBlt             78  float64\n","24  GarageFinish             78   object\n","25    GarageCars              1  float64\n","26    GarageArea              1  float64\n","27    GarageQual             78   object\n","28    GarageCond             78   object\n","29        PoolQC           1456   object\n","30         Fence           1169   object\n","31   MiscFeature           1408   object\n","32      SaleType              1   object\n"]}],"source":["# Highlighting missing values and their data types for train_df\n","missing_train = train_df.isnull().sum()[train_df.isnull().sum() > 0].reset_index()\n","missing_train.columns = ['Column', 'Missing Count']\n","missing_train['Dtype'] = missing_train['Column'].apply(lambda col: train_df[col].dtype)\n","\n","# Highlighting missing values and their data types for test_df\n","missing_test = test_df.isnull().sum()[test_df.isnull().sum() > 0].reset_index()\n","missing_test.columns = ['Column', 'Missing Count']\n","missing_test['Dtype'] = missing_test['Column'].apply(lambda col: test_df[col].dtype)\n","\n","# Display the resulting dataframes for train and test datasets\n","print(\"Missing Values in train_df with Dtypes:\")\n","print(missing_train)\n","\n","print(\"\\nMissing Values in test_df with Dtypes:\")\n","print(missing_test)"]},{"cell_type":"markdown","id":"a3ec1c87","metadata":{"papermill":{"duration":0.007288,"end_time":"2025-01-03T15:06:12.316337","exception":false,"start_time":"2025-01-03T15:06:12.309049","status":"completed"},"tags":[]},"source":["Since we have received a description of the features upon joining the competition we have already a plan to deal with NaN values for each feature. Generally we would assign a mix of median values and 0 where needed on the continous columns.\n","\n","We are going to start with the train_df and then we are going to extend the process to the test_df.\n","\n","For the categorical values we are going to need to assign \"None\" as this can be fed to the models as well.\n","\n","Break down of the continous columns:\n","\n","LotFrontage, MasVnrArea, GarageYrBlt.\n","\n","LotFrontage --> assign median MasVnrArea --> assign 0 as no masonry veneer GarageYrBlt --> assign 0 or drop column\n","\n","Break down of the categorical columns:\n","\n","Alley, MasVnrType, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, Electrical, FireplaceQu, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature.\n","\n","Alley --> fill with 'None' MasVnrType --> fill with 'None' BsmtQual --> fill with 'None' BsmtCond --> fill with 'None' BsmtExposure --> fill with 'None' BsmtFinType1 --> fill with 'None' BsmtFinType2 --> fill with 'None' Electrical --> fill with the most frequent value FireplaceQu --> fill with 'None' GarageType, GarageFinish, GarageQual, GarageCond --> fill with 'None' PoolQC --> fill with 'None' Fence --> fill with 'None' MiscFeature --> fill with 'None'"]},{"cell_type":"code","execution_count":8,"id":"4ae5f618","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.332592Z","iopub.status.busy":"2025-01-03T15:06:12.332191Z","iopub.status.idle":"2025-01-03T15:06:12.339144Z","shell.execute_reply":"2025-01-03T15:06:12.338238Z"},"papermill":{"duration":0.017069,"end_time":"2025-01-03T15:06:12.340742","exception":false,"start_time":"2025-01-03T15:06:12.323673","status":"completed"},"tags":[]},"outputs":[],"source":["#fillna continous features\n","\n","train_df['LotFrontage'] = train_df['LotFrontage'].fillna(train_df['LotFrontage'].mean())\n","train_df['MasVnrArea'] = train_df['MasVnrArea'].fillna(0)\n","train_df['GarageYrBlt'] = train_df['GarageYrBlt'].fillna(0)"]},{"cell_type":"code","execution_count":9,"id":"86a5729a","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.357831Z","iopub.status.busy":"2025-01-03T15:06:12.357475Z","iopub.status.idle":"2025-01-03T15:06:12.373467Z","shell.execute_reply":"2025-01-03T15:06:12.372343Z"},"papermill":{"duration":0.026499,"end_time":"2025-01-03T15:06:12.375438","exception":false,"start_time":"2025-01-03T15:06:12.348939","status":"completed"},"tags":[]},"outputs":[],"source":["#fillna categorical features\n","\n","train_df['Alley'] = train_df['Alley'].fillna('None')\n","train_df['MasVnrType'] = train_df['MasVnrType'].fillna('None')\n","train_df['BsmtQual'] = train_df['BsmtQual'].fillna('None')\n","train_df['BsmtCond'] = train_df['BsmtCond'].fillna('None')\n","train_df['BsmtExposure'] = train_df['BsmtExposure'].fillna('None')\n","train_df['BsmtFinType1'] = train_df['BsmtFinType1'].fillna('None')\n","train_df['BsmtFinType2'] = train_df['BsmtFinType2'].fillna('None')\n","train_df['Electrical'] = train_df['Electrical'].fillna('SBrkr')\n","train_df['FireplaceQu'] = train_df['FireplaceQu'].fillna('None')\n","train_df['GarageType'] = train_df['GarageType'].fillna('None')\n","train_df['GarageFinish'] = train_df['GarageFinish'].fillna('None')\n","train_df['GarageQual'] = train_df['GarageQual'].fillna('None')\n","train_df['GarageCond'] = train_df['GarageCond'].fillna('None')\n","train_df['PoolQC'] = train_df['PoolQC'].fillna('None')\n","train_df['Fence'] = train_df['Fence'].fillna('None')\n","train_df['MiscFeature'] = train_df['MiscFeature'].fillna('None')"]},{"cell_type":"code","execution_count":10,"id":"abcd32f0","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.392381Z","iopub.status.busy":"2025-01-03T15:06:12.392Z","iopub.status.idle":"2025-01-03T15:06:12.403641Z","shell.execute_reply":"2025-01-03T15:06:12.40259Z"},"papermill":{"duration":0.022247,"end_time":"2025-01-03T15:06:12.405421","exception":false,"start_time":"2025-01-03T15:06:12.383174","status":"completed"},"tags":[]},"outputs":[],"source":["#fillna continous feature for the test_df\n","test_df['LotFrontage'] = test_df['LotFrontage'].fillna(test_df['LotFrontage'].mean())\n","test_df['MasVnrArea'] = test_df['MasVnrArea'].fillna(0)\n","test_df['BsmtFinSF1'] = test_df['BsmtFinSF1'].fillna(0)\n","test_df['BsmtFinSF2'] = test_df['BsmtFinSF2'].fillna(0)\n","test_df['BsmtUnfSF'] = test_df['BsmtUnfSF'].fillna(0)\n","test_df['TotalBsmtSF'] = test_df['TotalBsmtSF'].fillna(0)\n","test_df['BsmtFullBath'] = test_df['BsmtFullBath'].fillna(0)\n","test_df['BsmtHalfBath'] = test_df['BsmtHalfBath'].fillna(0)\n","test_df['GarageYrBlt'] = test_df['GarageYrBlt'].fillna(0)\n","test_df['GarageCars'] = test_df['GarageCars'].fillna(0)\n","test_df['GarageArea'] = test_df['GarageArea'].fillna(0)"]},{"cell_type":"code","execution_count":11,"id":"e94e7e36","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.422147Z","iopub.status.busy":"2025-01-03T15:06:12.421766Z","iopub.status.idle":"2025-01-03T15:06:12.445755Z","shell.execute_reply":"2025-01-03T15:06:12.444635Z"},"papermill":{"duration":0.034614,"end_time":"2025-01-03T15:06:12.447919","exception":false,"start_time":"2025-01-03T15:06:12.413305","status":"completed"},"tags":[]},"outputs":[],"source":["#fillna for categorical columns of the test_df\n","test_df['MSZoning'] = test_df['MSZoning'].fillna(test_df['MSZoning'].mode()[0])\n","test_df['Alley'] = test_df['Alley'].fillna(0)\n","test_df['Utilities'] = test_df['Utilities'].fillna(test_df['Utilities'].mode()[0])\n","test_df['Exterior1st'] = test_df['Exterior1st'].fillna(test_df['Exterior1st'].mode()[0])\n","test_df['Exterior2nd'] = test_df['Exterior2nd'].fillna(test_df['Exterior2nd'].mode()[0])\n","test_df['MasVnrType'] = test_df['MasVnrType'].fillna('None')\n","test_df['BsmtQual'] = test_df['BsmtQual'].fillna('None')\n","test_df['BsmtCond'] = test_df['BsmtCond'].fillna('None')\n","test_df['BsmtExposure'] = test_df['BsmtExposure'].fillna('None')\n","test_df['BsmtFinType1'] = test_df['BsmtFinType1'].fillna('None')\n","test_df['BsmtFinType2'] = test_df['BsmtFinType2'].fillna('None')\n","test_df['KitchenQual'] = test_df['KitchenQual'].fillna(test_df['KitchenQual'].mode()[0])\n","test_df['Functional'] = test_df['Functional'].fillna(test_df['Functional'].mode()[0])\n","test_df['FireplaceQu'] = test_df['FireplaceQu'].fillna('None')\n","test_df['GarageType'] = test_df['GarageType'].fillna('None')\n","test_df['GarageFinish'] = test_df['GarageFinish'].fillna('None')\n","test_df['GarageQual'] = test_df['GarageQual'].fillna('None')\n","test_df['GarageCond'] = test_df['GarageCond'].fillna('None')\n","test_df['PoolQC'] = test_df['PoolQC'].fillna('None')\n","test_df['Fence'] = test_df['Fence'].fillna('None')\n","test_df['MiscFeature'] = test_df['MiscFeature'].fillna('None')\n","test_df['SaleType'] = test_df['SaleType'].fillna(test_df['SaleType'].mode()[0])"]},{"cell_type":"code","execution_count":12,"id":"32193ebd","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.466746Z","iopub.status.busy":"2025-01-03T15:06:12.466386Z","iopub.status.idle":"2025-01-03T15:06:12.496723Z","shell.execute_reply":"2025-01-03T15:06:12.495233Z"},"papermill":{"duration":0.040876,"end_time":"2025-01-03T15:06:12.498548","exception":false,"start_time":"2025-01-03T15:06:12.457672","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Empty DataFrame\n","Columns: [index, 0]\n","Index: []\n","Empty DataFrame\n","Columns: [index, 0]\n","Index: []\n"]}],"source":["missing_train = train_df.isnull().sum()[train_df.isnull().sum()>0].reset_index()\n","missing_test = test_df.isnull().sum()[test_df.isnull().sum()>0].reset_index()\n","\n","print(missing_train)\n","print(missing_test)"]},{"cell_type":"markdown","id":"cbce27fe","metadata":{"papermill":{"duration":0.007397,"end_time":"2025-01-03T15:06:12.513811","exception":false,"start_time":"2025-01-03T15:06:12.506414","status":"completed"},"tags":[]},"source":["Now that we have dealt with the missing values we can carry on with encoding our data. Once this is completed we are going to be able to train our model.\n","\n","When encoding we need to make sure that one-hot encoding is used for nominal non-ordinal data and label encoding for ordinal data.\n","\n","Let's break down the categorical features here below."]},{"cell_type":"code","execution_count":13,"id":"f18001e9","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.531033Z","iopub.status.busy":"2025-01-03T15:06:12.530702Z","iopub.status.idle":"2025-01-03T15:06:12.540467Z","shell.execute_reply":"2025-01-03T15:06:12.539331Z"},"papermill":{"duration":0.020801,"end_time":"2025-01-03T15:06:12.542566","exception":false,"start_time":"2025-01-03T15:06:12.521765","status":"completed"},"tags":[]},"outputs":[],"source":["# Start with clean copies\n","encoded_train_df = train_df.copy()\n","encoded_test_df = test_df.copy()"]},{"cell_type":"code","execution_count":14,"id":"be2402b6","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.559663Z","iopub.status.busy":"2025-01-03T15:06:12.559333Z","iopub.status.idle":"2025-01-03T15:06:12.583471Z","shell.execute_reply":"2025-01-03T15:06:12.582214Z"},"papermill":{"duration":0.034659,"end_time":"2025-01-03T15:06:12.58528","exception":false,"start_time":"2025-01-03T15:06:12.550621","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Empty DataFrame\n","Columns: [index, 0]\n","Index: []\n","Empty DataFrame\n","Columns: [index, 0]\n","Index: []\n"]}],"source":["missing_encoded_train = encoded_train_df.isnull().sum()[encoded_train_df.isnull().sum()>0].reset_index()\n","missing_encoded_test = encoded_test_df.isnull().sum()[encoded_test_df.isnull().sum()>0].reset_index()\n","\n","print(missing_train)\n","print(missing_test)"]},{"cell_type":"code","execution_count":15,"id":"8683b039","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.602684Z","iopub.status.busy":"2025-01-03T15:06:12.602317Z","iopub.status.idle":"2025-01-03T15:06:12.648094Z","shell.execute_reply":"2025-01-03T15:06:12.64714Z"},"papermill":{"duration":0.056844,"end_time":"2025-01-03T15:06:12.650074","exception":false,"start_time":"2025-01-03T15:06:12.59323","status":"completed"},"tags":[]},"outputs":[],"source":["# Apply one-hot encoding to nominal columns\n","nominal_columns = [\n","    'MSZoning', 'Street', 'Alley', 'LandContour', 'Utilities', 'LotConfig',\n","    'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n","    'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n","    'Foundation', 'Heating', 'CentralAir', 'GarageType', 'PavedDrive',\n","    'Fence', 'MiscFeature', 'SaleType', 'SaleCondition'\n","]\n","\n","encoded_train_df = pd.get_dummies(encoded_train_df, columns=nominal_columns, drop_first=True)\n","encoded_test_df = pd.get_dummies(encoded_test_df, columns=nominal_columns, drop_first=True)\n"]},{"cell_type":"code","execution_count":16,"id":"3d7156b8","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.667009Z","iopub.status.busy":"2025-01-03T15:06:12.666667Z","iopub.status.idle":"2025-01-03T15:06:12.680426Z","shell.execute_reply":"2025-01-03T15:06:12.679247Z"},"papermill":{"duration":0.024339,"end_time":"2025-01-03T15:06:12.682324","exception":false,"start_time":"2025-01-03T15:06:12.657985","status":"completed"},"tags":[]},"outputs":[],"source":["# Align train and test DataFrames\n","encoded_train_df, encoded_test_df = encoded_train_df.align(encoded_test_df, join='left', axis=1)\n","\n","# Fill missing columns in test_df (introduced by alignment) with 0\n","encoded_test_df.fillna(0, inplace=True)"]},{"cell_type":"code","execution_count":17,"id":"99e50d1c","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.699547Z","iopub.status.busy":"2025-01-03T15:06:12.6992Z","iopub.status.idle":"2025-01-03T15:06:12.746275Z","shell.execute_reply":"2025-01-03T15:06:12.745244Z"},"papermill":{"duration":0.057721,"end_time":"2025-01-03T15:06:12.748154","exception":false,"start_time":"2025-01-03T15:06:12.690433","status":"completed"},"tags":[]},"outputs":[],"source":["#label encoding for train_df and test_df\n","\n","lot_shape_mapping = {'Reg': 4, 'IR1': 3, 'IR2': 2, 'IR3': 1, 'None': 0}\n","\n","encoded_train_df['LotShape'] = train_df['LotShape'].map(lot_shape_mapping)\n","encoded_test_df['LotShape'] = test_df['LotShape'].map(lot_shape_mapping)\n","\n","land_slope_mapping = {'Gtl': 3, 'Mod': 2, 'Sev': 1, 'None': 0}\n","\n","encoded_train_df['LandSlope'] = train_df['LandSlope'].map(land_slope_mapping)\n","encoded_test_df['LandSlope'] = test_df['LandSlope'].map(land_slope_mapping)\n","\n","exter_qual_mapping = {'None': 0, 'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4}\n","\n","encoded_train_df['ExterQual'] = train_df['ExterQual'].map(exter_qual_mapping)\n","encoded_test_df['ExterQual'] = test_df['ExterQual'].map(exter_qual_mapping)\n","\n","exter_cond_mapping = {'None': 0, 'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4}\n","\n","encoded_train_df['ExterCond'] = train_df['ExterCond'].map(exter_cond_mapping)\n","encoded_test_df['ExterCond'] = test_df['ExterCond'].map(exter_cond_mapping)\n","\n","bsmt_qual_mapping = {'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4, 'None': 0}\n","\n","encoded_train_df['BsmtQual'] = train_df['BsmtQual'].map(bsmt_qual_mapping)\n","encoded_test_df['BsmtQual'] = test_df['BsmtQual'].map(bsmt_qual_mapping)\n","\n","bsmt_cond_mapping = {'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4, 'None': 0}\n","\n","encoded_train_df['BsmtCond'] = train_df['BsmtCond'].map(bsmt_cond_mapping)\n","encoded_test_df['BsmtCond'] = test_df['BsmtCond'].map(bsmt_cond_mapping)\n","\n","bsmt_exposure_mapping = {'None': 0, 'No': 1, 'Mn': 2, 'Av': 3, 'Gd': 4}\n","\n","encoded_train_df['BsmtExposure'] = train_df['BsmtExposure'].map(bsmt_exposure_mapping)\n","encoded_test_df['BsmtExposure'] = test_df['BsmtExposure'].map(bsmt_exposure_mapping)\n","\n","bsmt_fin_type1_mapping = {'None': 0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ': 4, 'ALQ': 5, 'GLQ': 6}\n","\n","encoded_train_df['BsmtFinType1'] = train_df['BsmtFinType1'].map(bsmt_fin_type1_mapping)\n","encoded_test_df['BsmtFinType1'] = test_df['BsmtFinType1'].map(bsmt_fin_type1_mapping)\n","\n","bsmt_fin_type2_mapping = {'None': 0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ': 4, 'ALQ': 5, 'GLQ': 6}\n","\n","encoded_train_df['BsmtFinType2'] = train_df['BsmtFinType2'].map(bsmt_fin_type2_mapping)\n","encoded_test_df['BsmtFinType2'] = test_df['BsmtFinType2'].map(bsmt_fin_type2_mapping)\n","\n","heating_qc_mapping = {'None': 0, 'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4}\n","\n","encoded_train_df['HeatingQC'] = train_df['HeatingQC'].map(heating_qc_mapping)\n","encoded_test_df['HeatingQC'] = test_df['HeatingQC'].map(heating_qc_mapping)\n","\n","electrical_mapping = {'SBrkr': 4, 'FuseA': 3, 'FuseF': 2, 'FuseP': 1, 'Mix': 0}\n","\n","encoded_train_df['Electrical'] = train_df['Electrical'].map(electrical_mapping)\n","encoded_test_df['Electrical'] = test_df['Electrical'].map(electrical_mapping)\n","\n","kitchen_qual_mapping = {'None': 0, 'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4}\n","\n","encoded_train_df['KitchenQual'] = train_df['KitchenQual'].map(kitchen_qual_mapping)\n","encoded_test_df['KitchenQual'] = test_df['KitchenQual'].map(kitchen_qual_mapping)\n","\n","functional_mapping = {'None': 0, 'Sal': 1, 'Sev': 2, 'Maj2': 3, 'Maj1': 4, 'Mod': 5, 'Min2': 6, 'Min1': 7, 'Typ': 8}\n","\n","encoded_train_df['Functional'] = train_df['Functional'].map(functional_mapping)\n","encoded_test_df['Functional'] = test_df['Functional'].map(functional_mapping)\n","\n","fireplace_qu_mapping = {'None': 0, 'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4}\n","\n","encoded_train_df['FireplaceQu'] = train_df['FireplaceQu'].map(fireplace_qu_mapping)\n","encoded_test_df['FireplaceQu'] = test_df['FireplaceQu'].map(fireplace_qu_mapping)\n","\n","garage_finish_mapping = {'None': 0, 'Unf': 1, 'RFn': 2, 'Fin': 3}\n","\n","encoded_train_df['GarageFinish'] = train_df['GarageFinish'].map(garage_finish_mapping)\n","encoded_test_df['GarageFinish'] = test_df['GarageFinish'].map(garage_finish_mapping)\n","\n","garage_qual_mapping = {'None': 0, 'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4}\n","\n","encoded_train_df['GarageQual'] = train_df['GarageQual'].map(garage_qual_mapping)\n","encoded_test_df['GarageQual'] = test_df['GarageQual'].map(garage_qual_mapping)\n","\n","garage_cond_mapping = {'None': 0, 'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4}\n","\n","encoded_train_df['GarageCond'] = train_df['GarageCond'].map(garage_cond_mapping)\n","encoded_test_df['GarageCond'] = test_df['GarageCond'].map(garage_cond_mapping)\n","\n","pool_qc_mapping = {'None': 0, 'Poor': 1, 'Fair': 2, 'Good': 3, 'Excellent': 4}\n","\n","encoded_train_df['PoolQC'] = train_df['PoolQC'].map(pool_qc_mapping)\n","encoded_test_df['PoolQC'] = test_df['PoolQC'].map(pool_qc_mapping)"]},{"cell_type":"markdown","id":"16c1d0e6","metadata":{"papermill":{"duration":0.007566,"end_time":"2025-01-03T15:06:12.76366","exception":false,"start_time":"2025-01-03T15:06:12.756094","status":"completed"},"tags":[]},"source":["Now that we have encoded both train and test df we are ready to train the Random Forest model with the data we have.\n","\n","First step is to prepare the Data for Modeling by separating the features X and target variable y from the training data."]},{"cell_type":"markdown","id":"523a40f2","metadata":{"papermill":{"duration":0.00738,"end_time":"2025-01-03T15:06:12.77875","exception":false,"start_time":"2025-01-03T15:06:12.77137","status":"completed"},"tags":[]},"source":["We can now fit the model and see the results. Once we have a result at hand we can decide to deep dive into it to improve performance if this doesn't reflect our expectations."]},{"cell_type":"markdown","id":"234f0dd7","metadata":{"papermill":{"duration":0.008947,"end_time":"2025-01-03T15:06:12.795702","exception":false,"start_time":"2025-01-03T15:06:12.786755","status":"completed"},"tags":[]},"source":["Next step:\n","\n","check missing values before splitting X and y train."]},{"cell_type":"code","execution_count":18,"id":"007df9ff","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.812593Z","iopub.status.busy":"2025-01-03T15:06:12.812252Z","iopub.status.idle":"2025-01-03T15:06:12.830984Z","shell.execute_reply":"2025-01-03T15:06:12.829575Z"},"papermill":{"duration":0.029324,"end_time":"2025-01-03T15:06:12.832859","exception":false,"start_time":"2025-01-03T15:06:12.803535","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["         index     0\n","0    ExterQual  1460\n","1    ExterCond  1460\n","2     BsmtQual  1423\n","3     BsmtCond  1423\n","4    HeatingQC  1460\n","5  KitchenQual  1460\n","6  FireplaceQu   770\n","7   GarageQual  1379\n","8   GarageCond  1379\n","9       PoolQC     7\n","         index     0\n","0    ExterQual  1459\n","1    ExterCond  1459\n","2     BsmtQual  1415\n","3     BsmtCond  1414\n","4    HeatingQC  1459\n","5  KitchenQual  1459\n","6  FireplaceQu   729\n","7   GarageQual  1381\n","8   GarageCond  1381\n","9       PoolQC     3\n"]}],"source":["missing_encoded_train = encoded_train_df.isnull().sum()[encoded_train_df.isnull().sum() > 0].reset_index()\n","missing_encoded_test = encoded_test_df.isnull().sum()[encoded_test_df.isnull().sum() > 0].reset_index()\n","\n","print(missing_encoded_train)\n","print(missing_encoded_test)"]},{"cell_type":"markdown","id":"ddcff626","metadata":{"papermill":{"duration":0.00756,"end_time":"2025-01-03T15:06:12.848465","exception":false,"start_time":"2025-01-03T15:06:12.840905","status":"completed"},"tags":[]},"source":["For some reason after encoding some values are now missing.\n","\n","We are going to deal with the missing values once again before fitting the model."]},{"cell_type":"code","execution_count":19,"id":"adfe66a7","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.870084Z","iopub.status.busy":"2025-01-03T15:06:12.869756Z","iopub.status.idle":"2025-01-03T15:06:12.880941Z","shell.execute_reply":"2025-01-03T15:06:12.880011Z"},"papermill":{"duration":0.025203,"end_time":"2025-01-03T15:06:12.882879","exception":false,"start_time":"2025-01-03T15:06:12.857676","status":"completed"},"tags":[]},"outputs":[],"source":["#Listing the columns to fill with 0 (corresponds to 'None')\n","\n","columns_to_fill_with_zero = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC',\n","    'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC']\n","\n","# Filling missing values in encoded_train_df\n","encoded_train_df[columns_to_fill_with_zero] = encoded_train_df[columns_to_fill_with_zero].fillna(0)\n","\n","#Filling missing values in encoded_test_df\n","encoded_test_df[columns_to_fill_with_zero] = encoded_test_df[columns_to_fill_with_zero].fillna(0)"]},{"cell_type":"code","execution_count":20,"id":"73bb003f","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.899792Z","iopub.status.busy":"2025-01-03T15:06:12.899417Z","iopub.status.idle":"2025-01-03T15:06:12.911083Z","shell.execute_reply":"2025-01-03T15:06:12.909893Z"},"papermill":{"duration":0.022457,"end_time":"2025-01-03T15:06:12.913106","exception":false,"start_time":"2025-01-03T15:06:12.890649","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["0\n","0\n"]}],"source":["print(encoded_train_df.isnull().sum().sum())  # Should be 0\n","print(encoded_test_df.isnull().sum().sum())  # Should be 0"]},{"cell_type":"markdown","id":"ea13e1f1","metadata":{"papermill":{"duration":0.007631,"end_time":"2025-01-03T15:06:12.928713","exception":false,"start_time":"2025-01-03T15:06:12.921082","status":"completed"},"tags":[]},"source":["Now that we have corrected the missing values we can proceed and split the X_train and y_train features.\n","\n","Why Do We Need This Division?\n","Machine Learning Algorithms Need Clear Input (X) and Output (y):\n","\n","Most machine learning algorithms, including Random Forest, are designed to take a matrix of features (X) and a vector of target values (y) as inputs.\n","The algorithm learns how the features in X_train relate to the corresponding target values in y_train."]},{"cell_type":"code","execution_count":21,"id":"3265d069","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.946193Z","iopub.status.busy":"2025-01-03T15:06:12.945808Z","iopub.status.idle":"2025-01-03T15:06:12.954781Z","shell.execute_reply":"2025-01-03T15:06:12.953688Z"},"papermill":{"duration":0.020106,"end_time":"2025-01-03T15:06:12.956881","exception":false,"start_time":"2025-01-03T15:06:12.936775","status":"completed"},"tags":[]},"outputs":[],"source":["#Splitting X and y train\n","\n","X_train = encoded_train_df.drop(columns=['Id','SalePrice']) #dropping Id and SalePrice\n","\n","y_train = encoded_train_df['SalePrice'] #target value\n","\n","#defining the test variable\n","\n","X_test = encoded_test_df.drop(columns=['Id'])"]},{"cell_type":"code","execution_count":22,"id":"c19715f6","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:12.973872Z","iopub.status.busy":"2025-01-03T15:06:12.973558Z","iopub.status.idle":"2025-01-03T15:06:17.932519Z","shell.execute_reply":"2025-01-03T15:06:17.931375Z"},"papermill":{"duration":4.969412,"end_time":"2025-01-03T15:06:17.93418","exception":false,"start_time":"2025-01-03T15:06:12.964768","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div>"],"text/plain":["RandomForestRegressor(random_state=42)"]},"execution_count":22,"metadata":{},"output_type":"execute_result"}],"source":["#fitting the RandomForestRegressor model\n","\n","from sklearn.ensemble import RandomForestRegressor\n","\n","#Inizializing the RFR model\n","rf_model = RandomForestRegressor(n_estimators=100, random_state=42)\n","\n","#Training the model on the training data\n","rf_model.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":23,"id":"6c64738c","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:17.954615Z","iopub.status.busy":"2025-01-03T15:06:17.954037Z","iopub.status.idle":"2025-01-03T15:06:17.96168Z","shell.execute_reply":"2025-01-03T15:06:17.96066Z"},"papermill":{"duration":0.020118,"end_time":"2025-01-03T15:06:17.963421","exception":false,"start_time":"2025-01-03T15:06:17.943303","status":"completed"},"tags":[]},"outputs":[],"source":["X_test = encoded_test_df.drop(columns=['Id', 'SalePrice'], errors='ignore') #dropping ID and SalePrice from X_test\n"]},{"cell_type":"code","execution_count":24,"id":"4bf71e8f","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:17.981345Z","iopub.status.busy":"2025-01-03T15:06:17.980942Z","iopub.status.idle":"2025-01-03T15:06:18.022821Z","shell.execute_reply":"2025-01-03T15:06:18.021526Z"},"papermill":{"duration":0.052995,"end_time":"2025-01-03T15:06:18.024802","exception":false,"start_time":"2025-01-03T15:06:17.971807","status":"completed"},"tags":[]},"outputs":[],"source":["# Make predictions on the test data\n","y_pred = rf_model.predict(X_test)"]},{"cell_type":"code","execution_count":25,"id":"5823beaf","metadata":{"execution":{"iopub.execute_input":"2025-01-03T15:06:18.043294Z","iopub.status.busy":"2025-01-03T15:06:18.042878Z","iopub.status.idle":"2025-01-03T15:06:18.055493Z","shell.execute_reply":"2025-01-03T15:06:18.054101Z"},"papermill":{"duration":0.024005,"end_time":"2025-01-03T15:06:18.057431","exception":false,"start_time":"2025-01-03T15:06:18.033426","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Submission file saved!\n"]}],"source":["#Preparing the submission DataFrame\n","\n","submission = pd.DataFrame ({\n","    'Id': test_df['Id'], #Using the Id of the original Dataframe\n","    'SalePrice': y_pred\n","})\n","\n","#Saving the submission into csv file\n","submission.to_csv('submission.csv', index=False)\n","\n","print(\"Submission file saved!\")"]},{"cell_type":"markdown","id":"12eb3d3d","metadata":{"papermill":{"duration":0.008864,"end_time":"2025-01-03T15:06:18.074829","exception":false,"start_time":"2025-01-03T15:06:18.065965","status":"completed"},"tags":[]},"source":["The model received a score of 0.14758 meaning that is precise considering the evaluation logic.\n","\n","One further step could be creating a GradientBoosting model or deep dive into Feature Engineering processes to make the model even more precise than what it is at the moment."]},{"cell_type":"code","execution_count":null,"id":"0bcf0da9","metadata":{"papermill":{"duration":0.007943,"end_time":"2025-01-03T15:06:18.091585","exception":false,"start_time":"2025-01-03T15:06:18.083642","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":868283,"sourceId":5407,"sourceType":"competition"}],"dockerImageVersionId":30822,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"papermill":{"default_parameters":{},"duration":9.554779,"end_time":"2025-01-03T15:06:18.822815","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-01-03T15:06:09.268036","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}